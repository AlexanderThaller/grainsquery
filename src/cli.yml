# MIT License
#
# Copyright (c) 2016 Alexander Thaller <alexander.thaller@trivago.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

name: grainsquery
author: Alexander Thaller <alexander.thaller@trivago.com>
about: Parse grain files generated by salt, check grains, generate reports.
settings:
  - ColoredHelp
  - GlobalVersion
  - NextLineHelp
args:
    - folder_grains:
        help: folder from which to read the grain files
        long: folder.grains
        takes_value: true
        global: true
        value_name: folder
    - log_level:
        help: the loglevel to run under
        long: log.level
        short: l
        takes_value: true
        global: true
        value_name: level
    - filter_environment:
        help: filter out all minions that are not in the given environment
        long: filter.environment
        short: e
        takes_value: true
        global: true
        value_name: environment
    - filter_id:
        help: filter out all minions that don't match the given id (allows regex)
        long: filter.id
        short: i
        takes_value: true
        global: true
        value_name: id
    - filter_id_inverse:
        help: reverts the filter for the id and prints all minions that don't match the id if true
        long: filter.id.inverse
        short: n
        takes_value: true
        global: true
        value_name: inverse
    - filter_os_family:
        help: filter out all minions that don't use the given operating systems
        long: filter.os_family
        short: f
        takes_value: true
        global: true
        value_name: os_family
    - filter_productname:
        help: filter out all minions that don't use the given productname
        long: filter.productname
        short: u
        takes_value: true
        global: true
        value_name: productname
    - filter_realm:
        help: filter out all minions that are not in the given realm
        long: filter.realm
        short: r
        takes_value: true
        global: true
        value_name: realm
    - filter_saltversion:
        help: filter out all minions that are not using the given salt version
        long: filter.saltversion
        short: s
        takes_value: true
        global: true
        value_name: version
    - filter_roles:
        help: filter out all minions which don't have the given role (multiple occurences possible)
        long: filter.role
        short: o
        takes_value: true
        global: true
        value_name: role
        multiple: true
    - filter_roles_mode:
        help: the mode of the roles filter which specifies if you want all
          minions that have one of the given roles or all roles (default is one)
        long: filter.roles.mode
        takes_value: true
        global: true
        value_name: mode
    - filter_ip:
        help: filter out all minions that dont have the given ip
        long: filter.ip
        short: p
        takes_value: true
        global: true
        value_name: ip
    - filter_saltmaster:
        help: filter out all minions that don't connect to the given saltmaster
        long: filter.saltmaster
        short: m
        takes_value: true
        global: true
        value_name: environment
    - filter_applications:
        help: filter out all minions that don't have the given application
        long: filter.application
        short: a
        takes_value: true
        global: true
        value_name: environment
    - filter_applications_mode:
        help: the mode of the application filter which specifies if you want all
          minions that have one of the given application or all application (default is one)
        long: filter.application.mode
        takes_value: true
        global: true
        value_name: mode
    - filter_serialnumber:
        help: filter out all minions without the given serialnumber
        long: filter.serialnumber
        short: S
        takes_value: true
        global: true
        value_name: serialnumber
    - filter_isvirtual:
        help: filter out all minions without the given virtualization type
        long: filter.virtual
        short: V
        takes_value: true
        global: true
        value_name: type
    - cache_file:
        help: file to use for caching the result of the grains file parsing
        long: cache.file
        takes_value: true
        value_name: file
        global: true
    - cache_use:
        help: if true we will use and generate a cachefile specified by cache,file
        long: cache.use
        takes_value: true
        global: true
        value_name: bool
    - cache_force_refresh:
        help: if true the cache will be forcefully refreshed
        long: cache.force_refresh
        takes_value: true
        global: true
        value_name: bool

subcommands:
  - report:
      about: generate a report out the grain files
      args:
        - report_hosts:
            help: if false the list of hosts will not be generated
            long: report.hosts
            takes_value: true
            value_name: bool
  - aggregate:
      about: aggregate over certain aspects of the minions
      subcommands:
        - roles:
            about: aggregate roles
        - realm:
            about: aggregate roles
        - environment:
            about: aggregate roles
        - applications:
            about: aggregate applications
  - validate:
      about: show warnings (missing roles, environment, realm, etc.) about the parsed grains
      args:
        - warn_noenvironment:
            help: warn about minions that don't have the environment grain set
            long: warn.noenvironment
            takes_value: true
            value_name: bool
        - warn_norealm:
            help: warn about minions that don't have the realm grain set
            long: warn.norealm
            takes_value: true
            value_name: bool
        - warn_noroles:
            help: warn about minions that don't have any roles set
            long: warn.noroles
            takes_value: true
            value_name: bool
        - warn_nosaltmaster:
            help: warn about minions that don't have a saltmaster set
            long: warn.nosaltmaster
            takes_value: true
            value_name: bool
        - warn_noipv6:
            help: warn about minions that don't have an ipv6 adress set
            long: warn.noipv6
            takes_value: true
            value_name: bool
        - warn_different_master:
            help: warn about minions that have a different salt master in their config
            long: warn.different_master
            takes_value: true
            value_name: bool
  - list:
      about: show minions which where parsed from the grains
      args:
        - output_format:
            help: the output format of the list
            long: out
            short: O
            takes_value: true
            default_value: default
            value_name: format
            possible_values: [ default, json ]
  - ssh_hosts:
      about: generate ssh hosts file from grains
      args:
        - hosts_prefix:
            help: a prefix that will be written in front of every host (format prefix.host)
            long: prefix
            takes_value: true
            value_name: prefix
